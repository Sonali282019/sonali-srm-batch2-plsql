1.CREATE TABLE depart(depart_id int primary key,depart_name varchar(30) NOT NULL,manager_id int unique);
2.create table employees(emp_id int primary key,emp_name varchar(20),email char(25),phone_no int,dept_id int );
3.alter table employees add salary int;
4.alter table employees add foreign key(dept_id) references depart(depart_id);
6. alter table employees drop column email;
8. alter table employees rename to empl;
9.create table depart1 (depart_id int primary key,depart_name varchar(30) NOT NULL,manager_id int unique);
10. drop table depart1;



day2:
insert into depart(depart_id,depart_name,manager_id)values( 40 ,'materials', 789),(50, 'production',911);
select * from depart where depart_name ='materials';
 insert into employees(emp_id,emp_name,phone_no,dept_id,salary,email)values (101 ,'Babu',94834121,10,12000,'babu101@gmail.com' ),(102, 'Somu' ,94485340, 20, 10000,'somu102@gmail.com'),(103 ,'Ramu' ,94488864, 40, 15000,'ramu103@gmail.com'),(104 ,'Gobu',94477832, 50, 11500,'gobu104@gmail.com'),(105, 'Anbu' , 98483412, 40, 22000,'anbu105@gmail.com');
select E.emp_name,D.depart_name,E.salary from employees E join depart D on E.dept_id=D.depart_id where D.depart_name='materials'and E.salary>15000;
select emp_name,salary,(salary*5/100) as Bouns from employees;
select emp_name from employees where emp_name like'R%';
select depart_id from depart where depart_name-'sales';
 update employees set salary= salary+(salary*10/100) where dept_id in(select depart_id from depart where depart_name='sales');
update employees set salary= salary-(salary*3/100) where dept_id in(select depart_id from depart where depart_name='inventory');
create table updatedempp as (select emp_id,emp_name,email,dept_id,salary from employees where dept_id>20);
delete from employees where salary<12000;
 select* from employees order by salary asc;
select* from employees order by salary dsc;


day3:
1.insert into Students(stu_id,stu_name,sex,tot_marks) values(10,'Anu','Female',553),(20, 'Anbu',' Male', 345),(30 ,'Malini' ,'Female', 567),(40, 'Sankar', 'Male', 590),(50, 'varshan', 'Male', 587);
(a)select max(mark) as tot_marks from Students;
(b)select count(sex)from Students group by sex;
(c)select avg(tot_marks)from Students;
(d)select stu_name from Students where tot_marks>(select avg(tot_marks) from Students);
2.(B)select * from students order by sex asc,tot_marks desc;
3.select max(tot_marks)-min(tot_marks) difference from Students;
4.create view mytab (stu_id,stu_name,sex,tot_marks) as select stu_id,stu_name,sex,tot_marks from Students where stu_id=10 with check option;
5.(a)insert into Students(stu_id,stu_name,sex,tot_marks) values(80,'Anupama','Female',563),(70, 'Anant','Male',445),(60 ,'Malinika' ,'Female',667);
(b)savepoint insertsave;
(c)rollback to insertsave;
6.1 declare
  2  a int:=8;
  3  cube int;
  4  root int;
  5  begin
  6  cube:= a*a*a;
  7  select power(8,1/3) into a from dual;dbms_output.put_line('The Cube of the number is'||cube);
  8  dbms_output.put_line('The cuberoot of number is' || a);
  9* end;

day4:
1) declare
   i number(2);
    n number(2);
    begin
   n:=&n;
   for i in 1..10 loop
    dbms_output.put_line( n || ' * ' || i || ' = ' || n*i);
   end loop;
  end;
2)

DECLARE
      n number:= &first_n_number;
    BEGIN
     DBMS_OUTPUT.PUT_LINE ('The first '||n||' numbers are: ');
        for i in 0..n loop
           dbms_output.put(i||'  ');
           insert into temp values(i);
        END LOOP;
        dbms_output.new_line;
   END;


3)

DECLARE
    CURSOR z_emp_info IS
      SELECT emp_id,
             empname,
             email,
             salary
      FROM   employees where salary>20000;
    r_emp_info z_emp_info%ROWTYPE;
BEGIN
    OPEN z_emp_info;
    LOOP
        FETCH z_emp_info INTO r_emp_info;
        EXIT WHEN z_emp_info%NOTFOUND;
        dbms_output.Put_line('Employees Information:: '
                             ||'  ID: '
                             ||r_emp_info.emp_id
                             ||'  Name: '
                             ||r_emp_info.empname
                             ||' email: '
                             ||r_emp_info.email
                             ||' salary: '
                             ||r_emp_info.salary);
    END LOOP;
    dbms_output.Put_line('Total number of rows : '
                         ||z_emp_info%rowcount);
    CLOSE z_emp_info;
END;
/


4) select * from employees;

CREATE OR REPLACE TRIGGER department_insert_update
       BEFORE INSERT OR UPDATE ON employees
               FOR EACH ROW
        DECLARE
          dup_flag  INTEGER;
        BEGIN
            :NEW.empname := UPPER(:NEW.empname);
       END;


5)
 DECLARE
        tempp employees%rowtype;
    BEGIN
        SELECT * INTO tempp FROM employees where emp_id=121;
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Table havet data');
   END;
    

6)

DECLARE 
    s VARCHAR2(10) := 'abccba'; 
    l VARCHAR2(20); 
    t VARCHAR2(10); 
BEGIN 
    FOR i IN REVERSE 1..Length(s) LOOP 
        l := Substr(s, i, 1); 
        t := t 
             ||'' 
             ||l; 
    END LOOP; 
    IF t = s THEN 
      dbms_output.Put_line(t 
                           ||'' 
                           ||' is palindrome'); 
    ELSE 
      dbms_output.Put_line(t 
                           ||'' 
                           ||' is not palindrome'); 
    END IF; 
END; 
/

7)

DECLARE
Sample_exception EXCEPTION;
PROCEDURE nested_block
IS
BEGIN
Dbms_output.put_line('Inside nested block');
Dbms_output.put_line('Raising sample_exception from nested block');
RAISE sample_exception;
EXCEPTION
WHEN sample_exception THEN 
Dbms_output.put_line ('Exception captured in nested block Raising to main block');
RAISE;
END;
BEGIN
Dbms_output.put_line('Inside main block');
Dbms_output.put_line('Calling nested block');
Nested_block;
EXCEPTION
WHEN sample_exception THEN	
Dbms_output.put_line ('Exception captured in main block');
END;
/

8)

select * from depart;

CREATE OR REPLACE PROCEDURE deleteprocedure
    AS
    BEGIN
       delete from depart where dept_id=30;
       dbms_output.put_line('deleted successfully!');
   END;

EXECUTE deleteprocedure;

select * from deleteproc;
